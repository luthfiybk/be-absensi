// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  nip         String   @unique
  email       String   @unique
  nama        String
  password    String
  roleId      Int
  role        Role     @relation(fields: [roleId], references: [id])
  divisiId    Int?
  divisi      Divisi?  @relation(fields: [divisiId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  presensi    Presensi[]
  izin        Izin[]
  logActivity LogActivity[]
}

model Role {
  id            Int   @id @default(autoincrement())
  nama_role     String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  users         User[]
}

model Divisi {
  id               Int  @id @default(autoincrement())
  nama_divisi      String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  users            User[]
}

model Presensi {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [nip])
  tanggal   DateTime  @db.Date
  jamMasuk  DateTime
  latitude  Float
  longitude Float
  statusId  Int
  status    Status @relation(fields: [statusId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Izin {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [nip])
  tanggal     DateTime @db.Date
  keterangan  String
  file        String
  statusId    Int
  status      Status   @relation(fields: [statusId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Titik {
  id              Int   @id @default(autoincrement())
  nama_titik      String
  latitude        Float
  longitude       Float
  radius          Int
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Status {
  id               Int   @id @default(autoincrement())
  nama_status      String
  group_status     String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  izin             Izin[]
  presensi         Presensi[]
}

model LogActivity {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [nip])
  activity  String
  time      DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}